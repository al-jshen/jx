
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace gpbffg_matern_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 76> locations_array__ = 
{" (found before start of program)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 30, column 2 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 31, column 2 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 32, column 2 to column 21)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 33, column 2 to column 21)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 34, column 2 to column 30)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 35, column 2 to column 24)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 36, column 2 to column 30)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 37, column 2 to column 24)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 57, column 2 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 58, column 2 to column 18)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 61, column 11 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 61, column 4 to column 79)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 62, column 11 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 62, column 4 to column 79)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 64, column 4 to column 66)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 65, column 4 to column 65)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 59, column 2 to line 66, column 3)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 41, column 9 to column 12)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 41, column 2 to column 77)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 42, column 9 to column 12)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 42, column 2 to column 77)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 44, column 2 to column 29)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 45, column 2 to column 29)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 46, column 2 to column 24)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 47, column 2 to column 24)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 48, column 2 to column 31)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 49, column 2 to column 31)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 50, column 2 to column 26)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 51, column 2 to column 26)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 53, column 2 to line 54, column 60)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 5, column 2 to column 17)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 6, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 6, column 2 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 7, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 7, column 2 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 9, column 2 to column 20)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 10, column 2 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 11, column 2 to column 20)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 12, column 2 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 16, column 2 to column 23)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 17, column 2 to column 23)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 18, column 2 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 19, column 2 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 20, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 20, column 2 to column 33)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 21, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 21, column 2 to column 33)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 23, column 2 to column 25)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 24, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 24, column 11 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 24, column 2 to column 45)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 26, column 2 to column 24)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 27, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 27, column 11 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 27, column 2 to column 45)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 32, column 9 to column 12)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 33, column 9 to column 12)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 57, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 58, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 2, column 2, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 1, column 55, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 5, column 3, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 4, column 61, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 8, column 2, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 9, column 9, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 9, column 2, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 10, column 2, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 7, column 53, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 13, column 2, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 12, column 43, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 16, column 9, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 16, column 11, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 16, column 2, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 17, column 2, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)",
 " (in '/home/js/programs/jx/jx/stanmodels/gpbasisfun_functions.stan', line 15, column 53, included from\n'/home/js/programs/jx/jx/stanmodels/gpbffg_matern.stan', line 2, column 0)"};


template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
diagSPD_EQ(const T0__& alpha, const T1__& rho, const T2__& L, const int& M,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 60;
    return multiply(
             (alpha *
               stan::math::sqrt(
                 (stan::math::sqrt((2 * stan::math::pi())) * rho))),
             stan::math::exp(
               multiply(
                 (-0.25 * pow((((rho * stan::math::pi()) / 2) / L), 2)),
                 pow(linspaced_vector(M, 1, M), 2))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct diagSPD_EQ_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
operator()(const T0__& alpha, const T1__& rho, const T2__& L, const int& M,
           std::ostream* pstream__)  const 
{
return diagSPD_EQ(alpha, rho, L, M, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
diagSPD_Matern32(const T0__& alpha, const T1__& rho, const T2__& L,
                 const int& M, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 62;
    return multiply(((2 * alpha) * pow((stan::math::sqrt(3) / rho), 1.5)),
             inv(
               add(pow((stan::math::sqrt(3) / rho), 2),
                 pow(
                   multiply(((stan::math::pi() / 2) / L),
                     linspaced_vector(M, 1, M)), 2))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct diagSPD_Matern32_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
operator()(const T0__& alpha, const T1__& rho, const T2__& L, const int& M,
           std::ostream* pstream__)  const 
{
return diagSPD_Matern32(alpha, rho, L, M, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
diagSPD_periodic(const T0__& alpha, const T1__& rho, const int& M,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 64;
    a = (1 / pow(rho, 2));
    current_statement__ = 65;
    validate_non_negative_index("q", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> q;
    q = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(q, DUMMY_VAR__);
    
    current_statement__ = 66;
    assign(q,
      stan::math::exp(
        add(((2 * stan::math::log(alpha)) - a),
          multiply(0.5,
            to_vector(
              log_modified_bessel_first_kind(linspaced_int_array(M, 1, M), a))))),
      "assigning variable q");
    current_statement__ = 67;
    return append_row(q, q);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct diagSPD_periodic_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& alpha, const T1__& rho, const int& M,
           std::ostream* pstream__)  const 
{
return diagSPD_periodic(alpha, rho, M, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
PHI(const int& N, const int& M, const T2__& L, const T3__& x_arg__,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& x = to_ref(x_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 69;
    return divide(
             stan::math::sin(
               diag_post_multiply(
                 rep_matrix(
                   multiply((stan::math::pi() / (2 * L)), add(x, L)), M),
                 linspaced_vector(M, 1, M))), stan::math::sqrt(L));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct PHI_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& N, const int& M, const T2__& L, const T3__& x,
           std::ostream* pstream__)  const 
{
return PHI(N, M, L, x, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
PHI_periodic(const int& N, const int& M, const T2__& w0, const T3__& x_arg__,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& x = to_ref(x_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 71;
    validate_non_negative_index("mw0x", "N", N);
    current_statement__ = 72;
    validate_non_negative_index("mw0x", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, -1> mw0x;
    mw0x = Eigen::Matrix<local_scalar_t__, -1, -1>(N, M);
    stan::math::fill(mw0x, DUMMY_VAR__);
    
    current_statement__ = 73;
    assign(mw0x,
      diag_post_multiply(rep_matrix(multiply(w0, x), M),
        linspaced_vector(M, 1, M)), "assigning variable mw0x");
    current_statement__ = 74;
    return append_col(stan::math::cos(mw0x), stan::math::sin(mw0x));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct PHI_periodic_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& N, const int& M, const T2__& w0, const T3__& x,
           std::ostream* pstream__)  const 
{
return PHI_periodic(N, M, w0, x, pstream__);
}
};

class gpbffg_matern_model final : public model_base_crtp<gpbffg_matern_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> x__;
  Eigen::Matrix<double, -1, 1> y__;
  double c_f;
  int M_f;
  double c_g;
  int M_g;
  double xmean;
  double ymean;
  double xsd;
  double ysd;
  Eigen::Matrix<double, -1, 1> xn__;
  Eigen::Matrix<double, -1, 1> yn__;
  double L_f;
  Eigen::Matrix<double, -1, -1> PHI_f__;
  double L_g;
  Eigen::Matrix<double, -1, -1> PHI_g__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> xn{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> yn{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> PHI_f{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> PHI_g{nullptr, 0, 0};
 
 public:
  ~gpbffg_matern_model() { }
  
  inline std::string model_name() const final { return "gpbffg_matern_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = --include-paths=/home/js/programs/jx/jx/stanmodels"};
  }
  
  
  gpbffg_matern_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "gpbffg_matern_model_namespace::gpbffg_matern_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 31;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 31;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 32;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      x__ = Eigen::Matrix<double, -1, 1>(N);
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x__.data(), N);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 33;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 33;
          assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 34;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 35;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 35;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 35;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 35;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 36;
      context__.validate_dims("data initialization","c_f","double",
           std::vector<size_t>{});
      c_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 36;
      c_f = context__.vals_r("c_f")[(1 - 1)];
      current_statement__ = 36;
      check_greater_or_equal(function__, "c_f", c_f, 0);
      current_statement__ = 37;
      context__.validate_dims("data initialization","M_f","int",
           std::vector<size_t>{});
      M_f = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      M_f = context__.vals_i("M_f")[(1 - 1)];
      current_statement__ = 37;
      check_greater_or_equal(function__, "M_f", M_f, 1);
      current_statement__ = 38;
      context__.validate_dims("data initialization","c_g","double",
           std::vector<size_t>{});
      c_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 38;
      c_g = context__.vals_r("c_g")[(1 - 1)];
      current_statement__ = 38;
      check_greater_or_equal(function__, "c_g", c_g, 0);
      current_statement__ = 39;
      context__.validate_dims("data initialization","M_g","int",
           std::vector<size_t>{});
      M_g = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      M_g = context__.vals_i("M_g")[(1 - 1)];
      current_statement__ = 39;
      check_greater_or_equal(function__, "M_g", M_g, 1);
      current_statement__ = 40;
      xmean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 40;
      xmean = mean(x);
      current_statement__ = 41;
      ymean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 41;
      ymean = mean(y);
      current_statement__ = 42;
      xsd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 42;
      xsd = sd(x);
      current_statement__ = 43;
      ysd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 43;
      ysd = sd(y);
      current_statement__ = 44;
      validate_non_negative_index("xn", "N", N);
      current_statement__ = 45;
      xn__ = Eigen::Matrix<double, -1, 1>(N);
      new (&xn) Eigen::Map<Eigen::Matrix<double, -1, 1>>(xn__.data(), N);
      stan::math::fill(xn, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 45;
      assign(xn, divide(subtract(x, xmean), xsd), "assigning variable xn");
      current_statement__ = 46;
      validate_non_negative_index("yn", "N", N);
      current_statement__ = 47;
      yn__ = Eigen::Matrix<double, -1, 1>(N);
      new (&yn) Eigen::Map<Eigen::Matrix<double, -1, 1>>(yn__.data(), N);
      stan::math::fill(yn, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 47;
      assign(yn, divide(subtract(y, ymean), ysd), "assigning variable yn");
      current_statement__ = 48;
      L_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 48;
      L_f = (c_f * max(xn));
      current_statement__ = 49;
      validate_non_negative_index("PHI_f", "N", N);
      current_statement__ = 50;
      validate_non_negative_index("PHI_f", "M_f", M_f);
      current_statement__ = 51;
      PHI_f__ = Eigen::Matrix<double, -1, -1>(N, M_f);
      new (&PHI_f) Eigen::Map<Eigen::Matrix<double, -1, -1>>(PHI_f__.data(), N, M_f);
      stan::math::fill(PHI_f, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 51;
      assign(PHI_f, PHI(N, M_f, L_f, xn, pstream__),
        "assigning variable PHI_f");
      current_statement__ = 52;
      L_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      L_g = (c_g * max(xn));
      current_statement__ = 53;
      validate_non_negative_index("PHI_g", "N", N);
      current_statement__ = 54;
      validate_non_negative_index("PHI_g", "M_g", M_g);
      current_statement__ = 55;
      PHI_g__ = Eigen::Matrix<double, -1, -1>(N, M_g);
      new (&PHI_g) Eigen::Map<Eigen::Matrix<double, -1, -1>>(PHI_g__.data(), N, M_g);
      stan::math::fill(PHI_g, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 55;
      assign(PHI_g, PHI(N, M_g, L_g, xn, pstream__),
        "assigning variable PHI_g");
      current_statement__ = 56;
      validate_non_negative_index("beta_f", "M_f", M_f);
      current_statement__ = 57;
      validate_non_negative_index("beta_g", "M_g", M_g);
      current_statement__ = 58;
      validate_non_negative_index("f", "N", N);
      current_statement__ = 59;
      validate_non_negative_index("sigma", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + M_f + M_g + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gpbffg_matern_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ intercept_f;
      intercept_f = DUMMY_VAR__;
      
      current_statement__ = 1;
      intercept_f = in__.template read<local_scalar_t__>();
      local_scalar_t__ intercept_g;
      intercept_g = DUMMY_VAR__;
      
      current_statement__ = 2;
      intercept_g = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_f;
      beta_f = Eigen::Matrix<local_scalar_t__, -1, 1>(M_f);
      stan::math::fill(beta_f, DUMMY_VAR__);
      
      current_statement__ = 3;
      beta_f = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 M_f);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_g;
      beta_g = Eigen::Matrix<local_scalar_t__, -1, 1>(M_g);
      stan::math::fill(beta_g, DUMMY_VAR__);
      
      current_statement__ = 4;
      beta_g = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 M_g);
      local_scalar_t__ lengthscale_f;
      lengthscale_f = DUMMY_VAR__;
      
      current_statement__ = 5;
      lengthscale_f = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      local_scalar_t__ sigma_f;
      sigma_f = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma_f = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      local_scalar_t__ lengthscale_g;
      lengthscale_g = DUMMY_VAR__;
      
      current_statement__ = 7;
      lengthscale_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      local_scalar_t__ sigma_g;
      sigma_g = DUMMY_VAR__;
      
      current_statement__ = 8;
      sigma_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      {
        current_statement__ = 18;
        validate_non_negative_index("diagSPD_f", "M_f", M_f);
        Eigen::Matrix<local_scalar_t__, -1, 1> diagSPD_f;
        diagSPD_f = Eigen::Matrix<local_scalar_t__, -1, 1>(M_f);
        stan::math::fill(diagSPD_f, DUMMY_VAR__);
        
        current_statement__ = 19;
        assign(diagSPD_f,
          diagSPD_Matern32(sigma_f, lengthscale_f, L_f, M_f, pstream__),
          "assigning variable diagSPD_f");
        current_statement__ = 20;
        validate_non_negative_index("diagSPD_g", "M_g", M_g);
        Eigen::Matrix<local_scalar_t__, -1, 1> diagSPD_g;
        diagSPD_g = Eigen::Matrix<local_scalar_t__, -1, 1>(M_g);
        stan::math::fill(diagSPD_g, DUMMY_VAR__);
        
        current_statement__ = 21;
        assign(diagSPD_g,
          diagSPD_Matern32(sigma_g, lengthscale_g, L_g, M_g, pstream__),
          "assigning variable diagSPD_g");
        current_statement__ = 22;
        lp_accum__.add(normal_lpdf<propto__>(intercept_f, 0, 1));
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(intercept_g, 0, 1));
        current_statement__ = 24;
        lp_accum__.add(normal_lpdf<propto__>(beta_f, 0, 1));
        current_statement__ = 25;
        lp_accum__.add(normal_lpdf<propto__>(beta_g, 0, 1));
        current_statement__ = 26;
        lp_accum__.add(normal_lpdf<propto__>(lengthscale_f, 0, 1));
        current_statement__ = 27;
        lp_accum__.add(normal_lpdf<propto__>(lengthscale_g, 0, 1));
        current_statement__ = 28;
        lp_accum__.add(normal_lpdf<propto__>(sigma_f, 0, .5));
        current_statement__ = 29;
        lp_accum__.add(normal_lpdf<propto__>(sigma_g, 0, .5));
        current_statement__ = 30;
        lp_accum__.add(
          normal_lpdf<propto__>(yn,
            add(intercept_f,
              multiply(PHI_f, elt_multiply(diagSPD_f, beta_f))),
            stan::math::exp(
              add(intercept_g,
                multiply(PHI_g, elt_multiply(diagSPD_g, beta_g))))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "gpbffg_matern_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double intercept_f;
      intercept_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      intercept_f = in__.template read<local_scalar_t__>();
      double intercept_g;
      intercept_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      intercept_g = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> beta_f;
      beta_f = Eigen::Matrix<double, -1, 1>(M_f);
      stan::math::fill(beta_f, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      beta_f = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 M_f);
      Eigen::Matrix<double, -1, 1> beta_g;
      beta_g = Eigen::Matrix<double, -1, 1>(M_g);
      stan::math::fill(beta_g, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      beta_g = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 M_g);
      double lengthscale_f;
      lengthscale_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lengthscale_f = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_f = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      double lengthscale_g;
      lengthscale_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      lengthscale_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      double sigma_g;
      sigma_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_g = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      vars__.emplace_back(intercept_f);
      vars__.emplace_back(intercept_g);
      for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
        vars__.emplace_back(beta_f[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M_g; ++sym1__) {
        vars__.emplace_back(beta_g[(sym1__ - 1)]);
      }
      vars__.emplace_back(lengthscale_f);
      vars__.emplace_back(sigma_f);
      vars__.emplace_back(lengthscale_g);
      vars__.emplace_back(sigma_g);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> f;
      f = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        current_statement__ = 11;
        validate_non_negative_index("diagSPD_f", "M_f", M_f);
        Eigen::Matrix<double, -1, 1> diagSPD_f;
        diagSPD_f = Eigen::Matrix<double, -1, 1>(M_f);
        stan::math::fill(diagSPD_f, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 12;
        assign(diagSPD_f,
          diagSPD_Matern32(sigma_f, lengthscale_f, L_f, M_f, pstream__),
          "assigning variable diagSPD_f");
        current_statement__ = 13;
        validate_non_negative_index("diagSPD_g", "M_g", M_g);
        Eigen::Matrix<double, -1, 1> diagSPD_g;
        diagSPD_g = Eigen::Matrix<double, -1, 1>(M_g);
        stan::math::fill(diagSPD_g, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 14;
        assign(diagSPD_g,
          diagSPD_Matern32(sigma_g, lengthscale_g, L_g, M_g, pstream__),
          "assigning variable diagSPD_g");
        current_statement__ = 15;
        assign(f,
          add(
            multiply(
              add(intercept_f,
                multiply(PHI_f, elt_multiply(diagSPD_f, beta_f))), ysd),
            ymean), "assigning variable f");
        current_statement__ = 16;
        assign(sigma,
          multiply(
            stan::math::exp(
              add(intercept_g,
                multiply(PHI_g, elt_multiply(diagSPD_g, beta_g)))), ysd),
          "assigning variable sigma");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(f[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double intercept_f;
      intercept_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      intercept_f = context__.vals_r("intercept_f")[(1 - 1)];
      double intercept_g;
      intercept_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      intercept_g = context__.vals_r("intercept_g")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> beta_f;
      beta_f = Eigen::Matrix<double, -1, 1>(M_f);
      stan::math::fill(beta_f, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_f_flat__;
        current_statement__ = 3;
        beta_f_flat__ = context__.vals_r("beta_f");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
          current_statement__ = 3;
          assign(beta_f, beta_f_flat__[(pos__ - 1)],
            "assigning variable beta_f", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta_g;
      beta_g = Eigen::Matrix<double, -1, 1>(M_g);
      stan::math::fill(beta_g, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_g_flat__;
        current_statement__ = 4;
        beta_g_flat__ = context__.vals_r("beta_g");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= M_g; ++sym1__) {
          current_statement__ = 4;
          assign(beta_g, beta_g_flat__[(pos__ - 1)],
            "assigning variable beta_g", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      double lengthscale_f;
      lengthscale_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lengthscale_f = context__.vals_r("lengthscale_f")[(1 - 1)];
      double lengthscale_f_free__;
      lengthscale_f_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lengthscale_f_free__ = stan::math::lb_free(lengthscale_f, 0);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_f = context__.vals_r("sigma_f")[(1 - 1)];
      double sigma_f_free__;
      sigma_f_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_f_free__ = stan::math::lb_free(sigma_f, 0);
      double lengthscale_g;
      lengthscale_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      lengthscale_g = context__.vals_r("lengthscale_g")[(1 - 1)];
      double lengthscale_g_free__;
      lengthscale_g_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      lengthscale_g_free__ = stan::math::lb_free(lengthscale_g, 0);
      double sigma_g;
      sigma_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_g = context__.vals_r("sigma_g")[(1 - 1)];
      double sigma_g_free__;
      sigma_g_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sigma_g_free__ = stan::math::lb_free(sigma_g, 0);
      vars__.emplace_back(intercept_f);
      vars__.emplace_back(intercept_g);
      for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
        vars__.emplace_back(beta_f[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M_g; ++sym1__) {
        vars__.emplace_back(beta_g[(sym1__ - 1)]);
      }
      vars__.emplace_back(lengthscale_f_free__);
      vars__.emplace_back(sigma_f_free__);
      vars__.emplace_back(lengthscale_g_free__);
      vars__.emplace_back(sigma_g_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"intercept_f", "intercept_g",
      "beta_f", "beta_g", "lengthscale_f", "sigma_f", "lengthscale_g",
      "sigma_g", "f", "sigma"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(M_f)},
      std::vector<size_t>{static_cast<size_t>(M_g)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "intercept_f");
    param_names__.emplace_back(std::string() + "intercept_g");
    for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_f" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M_g; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_g" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "lengthscale_f");
    param_names__.emplace_back(std::string() + "sigma_f");
    param_names__.emplace_back(std::string() + "lengthscale_g");
    param_names__.emplace_back(std::string() + "sigma_g");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "intercept_f");
    param_names__.emplace_back(std::string() + "intercept_g");
    for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_f" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M_g; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_g" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "lengthscale_f");
    param_names__.emplace_back(std::string() + "sigma_f");
    param_names__.emplace_back(std::string() + "lengthscale_g");
    param_names__.emplace_back(std::string() + "sigma_g");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"intercept_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_f) + "},\"block\":\"parameters\"},{\"name\":\"beta_g\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_g) + "},\"block\":\"parameters\"},{\"name\":\"lengthscale_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lengthscale_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"intercept_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"intercept_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_f) + "},\"block\":\"parameters\"},{\"name\":\"beta_g\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_g) + "},\"block\":\"parameters\"},{\"name\":\"lengthscale_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lengthscale_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = gpbffg_matern_model_namespace::gpbffg_matern_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return gpbffg_matern_model_namespace::profiles__;
}

#endif


