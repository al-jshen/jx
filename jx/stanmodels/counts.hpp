
// Code generated by stanc v2.28.1
#include <stan/model/model_header.hpp>
namespace counts_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 43> locations_array__ = 
{" (found before start of program)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 22, column 2 to column 13)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 23, column 2 to column 13)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 25, column 2 to column 22)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 26, column 2 to column 29)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 28, column 2 to column 18)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 29, column 2 to column 16)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 33, column 2 to column 84)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 55, column 2 to column 15)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 59, column 2 to column 41)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 60, column 2 to column 67)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 61, column 2 to column 16)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 37, column 4 to column 97)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 40, column 4 to column 55)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 42, column 4 to column 36)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 44, column 4 to column 27)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 45, column 4 to column 27)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 46, column 4 to column 27)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 47, column 4 to column 27)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 48, column 4 to column 25)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 2, column 2 to column 17)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 3, column 2 to column 30)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 4, column 14 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 4, column 2 to column 21)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 6, column 2 to column 23)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 7, column 30 to column 37)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 7, column 2 to column 39)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 8, column 30 to column 37)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 8, column 2 to column 39)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 10, column 17 to column 22)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 10, column 2 to column 24)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 11, column 18 to column 19)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 11, column 2 to column 23)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 12, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 12, column 2 to column 14)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 14, column 2 to column 22)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 18, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 18, column 2 to column 27)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 28, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 29, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 33, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 55, column 9 to column 10)",
 " (in '/home/js/programs/jx/jx/stanmodels/counts.stan', line 60, column 9 to column 10)"};



class counts_model final : public model_base_crtp<counts_model> {

 private:
  int N;
  int N_obs;
  std::vector<int> obs_idx;
  int N_edges;
  std::vector<int> node1;
  std::vector<int> node2;
  std::vector<int> y;
  Eigen::Matrix<double, -1, 1> E__;
  Eigen::Matrix<double, -1, 1> x__;
  double scaling_factor;
  Eigen::Matrix<double, -1, 1> log_E__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> E{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> x{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> log_E{nullptr, 0};
 
 public:
  ~counts_model() { }
  
  inline std::string model_name() const final { return "counts_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.1", "stancflags = "};
  }
  
  
  counts_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "counts_model_namespace::counts_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 20;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 21;
      context__.validate_dims("data initialization","N_obs","int",
           std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 21;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 21;
      check_greater_or_equal(function__, "N_obs", N_obs, 0);
      current_statement__ = 21;
      check_less_or_equal(function__, "N_obs", N_obs, N);
      current_statement__ = 22;
      validate_non_negative_index("obs_idx", "N_obs", N_obs);
      current_statement__ = 23;
      context__.validate_dims("data initialization","obs_idx","int",
           std::vector<size_t>{static_cast<size_t>(N_obs)});
      obs_idx = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 23;
      obs_idx = context__.vals_i("obs_idx");
      current_statement__ = 24;
      context__.validate_dims("data initialization","N_edges","int",
           std::vector<size_t>{});
      N_edges = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      N_edges = context__.vals_i("N_edges")[(1 - 1)];
      current_statement__ = 24;
      check_greater_or_equal(function__, "N_edges", N_edges, 0);
      current_statement__ = 25;
      validate_non_negative_index("node1", "N_edges", N_edges);
      current_statement__ = 26;
      context__.validate_dims("data initialization","node1","int",
           std::vector<size_t>{static_cast<size_t>(N_edges)});
      node1 = std::vector<int>(N_edges, std::numeric_limits<int>::min());
      
      current_statement__ = 26;
      node1 = context__.vals_i("node1");
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 26;
        check_greater_or_equal(function__, "node1[sym1__]",
                               node1[(sym1__ - 1)], 1);
      }
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 26;
        check_less_or_equal(function__, "node1[sym1__]", node1[(sym1__ - 1)],
                            N);
      }
      current_statement__ = 27;
      validate_non_negative_index("node2", "N_edges", N_edges);
      current_statement__ = 28;
      context__.validate_dims("data initialization","node2","int",
           std::vector<size_t>{static_cast<size_t>(N_edges)});
      node2 = std::vector<int>(N_edges, std::numeric_limits<int>::min());
      
      current_statement__ = 28;
      node2 = context__.vals_i("node2");
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 28;
        check_greater_or_equal(function__, "node2[sym1__]",
                               node2[(sym1__ - 1)], 1);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 28;
        check_less_or_equal(function__, "node2[sym1__]", node2[(sym1__ - 1)],
                            N);
      }
      current_statement__ = 29;
      validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 30;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N_obs)});
      y = std::vector<int>(N_obs, std::numeric_limits<int>::min());
      
      current_statement__ = 30;
      y = context__.vals_i("y");
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        current_statement__ = 30;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);
      }
      current_statement__ = 31;
      validate_non_negative_index("E", "N", N);
      current_statement__ = 32;
      context__.validate_dims("data initialization","E","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      E__ = Eigen::Matrix<double, -1, 1>(N);
      new (&E) Eigen::Map<Eigen::Matrix<double, -1, 1>>(E__.data(), N);
      
      {
        std::vector<local_scalar_t__> E_flat__;
        current_statement__ = 32;
        E_flat__ = context__.vals_r("E");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 32;
          assign(E, E_flat__[(pos__ - 1)],
            "assigning variable E", index_uni(sym1__));
          current_statement__ = 32;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 32;
        check_greater_or_equal(function__, "E[sym1__]", E[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      x__ = Eigen::Matrix<double, -1, 1>(N);
      new (&x) Eigen::Map<Eigen::Matrix<double, -1, 1>>(x__.data(), N);
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 34;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 34;
          assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", index_uni(sym1__));
          current_statement__ = 34;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 35;
      context__.validate_dims("data initialization","scaling_factor",
          "double", std::vector<size_t>{});
      scaling_factor = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 35;
      scaling_factor = context__.vals_r("scaling_factor")[(1 - 1)];
      current_statement__ = 36;
      validate_non_negative_index("log_E", "N", N);
      current_statement__ = 37;
      log_E__ = Eigen::Matrix<double, -1, 1>(N);
      new (&log_E) Eigen::Map<Eigen::Matrix<double, -1, 1>>(log_E__.data(), N);
      stan::math::fill(log_E, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 37;
      assign(log_E, stan::math::log(E), "assigning variable log_E");
      current_statement__ = 38;
      validate_non_negative_index("theta", "N", N);
      current_statement__ = 39;
      validate_non_negative_index("phi", "N", N);
      current_statement__ = 40;
      validate_non_negative_index("convolved_re", "N", N);
      current_statement__ = 41;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 42;
      validate_non_negative_index("eta", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + N + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "counts_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ beta0;
      beta0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      beta0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta1;
      beta1 = DUMMY_VAR__;
      
      current_statement__ = 2;
      beta1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 4;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(theta, DUMMY_VAR__);
      
      current_statement__ = 5;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(phi, DUMMY_VAR__);
      
      current_statement__ = 6;
      phi = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<local_scalar_t__, -1, 1> convolved_re;
      convolved_re = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(convolved_re, DUMMY_VAR__);
      
      current_statement__ = 7;
      assign(convolved_re,
        add(multiply(stan::math::sqrt((1 - rho)), theta),
          multiply(stan::math::sqrt((rho / scaling_factor)), phi)),
        "assigning variable convolved_re");
      {
        current_statement__ = 12;
        lp_accum__.add(
          poisson_log_lpmf<propto__>(y,
            add(
              add(add(rvalue(log_E, "log_E", index_multi(obs_idx)), beta0),
                multiply(rvalue(x, "x", index_multi(obs_idx)), beta1)),
              multiply(
                rvalue(convolved_re, "convolved_re", index_multi(obs_idx)),
                sigma))));
        current_statement__ = 13;
        lp_accum__.add(
          (-0.5 *
            dot_self(
              subtract(rvalue(phi, "phi", index_multi(node1)),
                rvalue(phi, "phi", index_multi(node2))))));
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(sum(phi), 0, (0.001 * N)));
        current_statement__ = 15;
        lp_accum__.add(normal_lpdf<propto__>(beta0, 0., 5.));
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(beta1, 0., 5.));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(theta, 0., 1.));
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0., 1.));
        current_statement__ = 19;
        lp_accum__.add(normal_lpdf<propto__>(rho, 0., 5.));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "counts_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double beta0;
      beta0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta0 = in__.template read<local_scalar_t__>();
      double beta1;
      beta1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      beta1 = in__.template read<local_scalar_t__>();
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      theta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      phi = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N);
      Eigen::Matrix<double, -1, 1> convolved_re;
      convolved_re = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(convolved_re, std::numeric_limits<double>::quiet_NaN());
      
      
      out__.write(beta0);
      out__.write(beta1);
      out__.write(sigma);
      out__.write(rho);
      out__.write(theta);
      out__.write(phi);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(convolved_re,
        add(multiply(stan::math::sqrt((1 - rho)), theta),
          multiply(stan::math::sqrt((rho / scaling_factor)), phi)),
        "assigning variable convolved_re");
      if (emit_transformed_parameters__) {
        out__.write(convolved_re);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      double logit_rho;
      logit_rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      logit_rho = stan::math::log((rho / (1. - rho)));
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      assign(eta,
        add(add(add(log_E, beta0), multiply(x, beta1)),
          multiply(convolved_re, sigma)), "assigning variable eta");
      current_statement__ = 11;
      assign(mu, stan::math::exp(eta), "assigning variable mu");
      out__.write(mu);
      out__.write(logit_rho);
      out__.write(eta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      local_scalar_t__ beta0;
      beta0 = DUMMY_VAR__;
      
      beta0 = in__.read<local_scalar_t__>();
      out__.write(beta0);
      local_scalar_t__ beta1;
      beta1 = DUMMY_VAR__;
      
      beta1 = in__.read<local_scalar_t__>();
      out__.write(beta1);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rho);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(theta, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(theta, in__.read<local_scalar_t__>(),
          "assigning variable theta", index_uni(sym1__));
      }
      out__.write(theta);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(phi, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        assign(phi, in__.read<local_scalar_t__>(),
          "assigning variable phi", index_uni(sym1__));
      }
      out__.write(phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta0", "beta1", "sigma", "rho",
      "theta", "phi", "convolved_re", "mu", "logit_rho", "eta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "convolved_re" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "logit_rho");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "convolved_re" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "logit_rho");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"convolved_re\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"logit_rho\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"convolved_re\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"logit_rho\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + N) + N);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  ((N + 1) + N);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((((1 + 1) + 1) + 1) + N) + N);
      const size_t num_transformed = N;
      const size_t num_gen_quantities = 
  ((N + 1) + N);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 6> names__{"beta0", "beta1", "sigma",
      "rho", "theta", "phi"};
      const std::array<Eigen::Index, 6> constrain_param_sizes__{1, 1, 
       1, 1, N, N};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = counts_model_namespace::counts_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return counts_model_namespace::profiles__;
}

#endif


